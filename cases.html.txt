<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <title>Case Management</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --background-main: #F0F8F5; --primary-accent: #00B14F; --card-background: #FFFFFF;
      --text-primary: #111827; --text-secondary: #6B7280; --border-light: #E5E7EB;
      --shadow-color: rgba(0, 0, 0, 0.05); --red-deny: #EF4444; --yellow: #F59E0B; --blue: #3B82F6;
    }
    body { font-family: 'Inter', sans-serif; margin: 0; background-color: var(--background-main); color: var(--text-primary); }
    .header { background-color: var(--card-background); padding: 25px 30px; border-bottom: 1px solid var(--border-light); display: flex; justify-content: space-between; align-items: center; }
    .header h1 { margin: 0; font-size: 2.2em; font-weight: 800; }
    .page-container { padding: 30px; max-width: 100%; box-sizing: border-box; }

    /* Search Bar */
    .search-container { display: flex; gap: 15px; margin-bottom: 30px; background-color: var(--card-background); padding: 20px; border-radius: 12px; box-shadow: 0 4px 8px var(--shadow-color); }
    .search-container input { flex-grow: 1; font-size: 1.1em; padding: 12px; border-radius: 8px; border: 1px solid var(--border-light); }
    .search-container button { font-size: 1.1em; padding: 12px 25px; border: none; border-radius: 8px; background-color: var(--primary-accent); color: white; cursor: pointer; }

    /* Table Layout */
    .table-section {
      background-color: var(--card-background);
      border-radius: 12px;
      box-shadow: 0 4px 8px var(--shadow-color);
      margin-bottom: 30px;
      overflow: hidden;
    }
    .table-section h2 {
      font-size: 1.5em;
      font-weight: 700;
      padding: 20px;
      margin: 0;
      background-color: #F9FAFB;
      border-bottom: 1px solid var(--border-light);
    }
    .table-container {
      padding: 20px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th, td {
      padding: 12px 15px;
      text-align: left;
      border-bottom: 1px solid var(--border-light);
    }
    th {
      font-size: 0.9em;
      font-weight: 600;
      text-transform: uppercase;
      color: var(--text-secondary);
      cursor: pointer;
    }
    th .sort-icon {
      margin-left: 5px;
      display: inline-block;
    }
    tbody tr {
      cursor: pointer;
      transition: background-color 0.2s;
    }
    tbody tr:hover {
      background-color: #F9FAFB;
    }
    .group-header td {
        background-color: #F3F4F6; /* A light grey */
        font-weight: 600;
        color: var(--text-primary);
        padding-top: 10px;
        padding-bottom: 10px;
        font-size: 1.05em;
    }


    /* NEW MODAL STYLES */
    .modal-overlay { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.6); z-index: 1000; justify-content: center; align-items: center; }
    .modal-content { background-color: var(--card-background); border-radius: 12px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); width: 90%; max-width: 1400px; max-height: 90vh; display: flex; overflow: hidden; }
    .modal-main { flex-grow: 1; padding: 30px; overflow-y: auto; }
    .modal-header { display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid var(--border-light); padding-bottom: 20px; margin-bottom: 20px; }
    .modal-header h2 { margin: 0; font-size: 1.8em; }
    .close-button { font-size: 2.5em; font-weight: 300; color: var(--text-secondary); background: none; border: none; cursor: pointer; line-height: 1; }
    .details-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px 30px; }
    .details-grid .field { display: flex; flex-direction: column; }
    .details-grid .field strong { font-size: 0.8em; color: var(--text-secondary); margin-bottom: 3px; text-transform: uppercase; }
    .details-grid .field span, .details-grid .field input, .details-grid .field textarea { font-size: 1em; color: var(--text-primary); background: none; border: none; padding: 0; width: 100%; font-family: 'Inter', sans-serif; }
    .details-grid .field input, .details-grid .field textarea { background-color: var(--background-main); border: 1px solid var(--border-light); padding: 8px; border-radius: 6px; }
    .details-grid .field textarea { resize: vertical; min-height: 60px; }
    .truncate-link { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 250px; display: inline-block; vertical-align: middle; color: var(--blue); text-decoration: none; }
    .truncate-link:hover { text-decoration: underline; }
    .modal-actions { display: flex; justify-content: flex-end; gap: 20px; margin-top: 30px; padding-top: 20px; border-top: 1px solid var(--border-light); }
    .modal-actions button { font-size: 1em; padding: 10px 20px; border-radius: 8px; border:none; cursor:pointer; font-weight: 600; display: flex; align-items: center; gap: 8px; }
    .btn-primary { background-color: var(--primary-accent); color: white; }
    .btn-secondary { background-color: var(--border-light); color: var(--text-primary); }
    .btn-claim { background-color: var(--blue); color: white; }
    .btn-pause { background-color: var(--yellow); color: white; }
    .btn-escalate { background-color: var(--red-deny); color: white; }
    .btn-end { background-color: var(--primary-accent); color: white; }
    .btn-unpause { background-color: #5EADDD; color: white; }
    .btn-deescalate { background-color: #A78BFA; color: white; }
    #case-action-buttons { display: flex; gap: 15px; }
    #edit-guide-sidebar { display: none; flex-basis: 350px; background-color: #F9FAFB; padding: 25px; box-sizing: border-box; border-left: 1px solid var(--border-light); overflow-y: auto;}
    #edit-guide-sidebar.visible { display: block; }
    #edit-guide-sidebar h3 { margin-top: 0; font-size: 1.4em; color: var(--primary-accent); }
    #edit-guide-sidebar p { color: var(--text-secondary); line-height: 1.6; }
    #edit-guide-sidebar .calculation { background-color: white; padding: 15px; border-radius: 8px; margin-top: 20px; font-family: 'Consolas', monospace; border: 1px solid var(--border-light); }

    /* --- STYLES FOR LOG SECTIONS IN MODAL --- */
.log-section {
    margin-top: 25px;
    padding-top: 20px;
    border-top: 1px solid var(--border-light);
}
.log-section h3 {
    margin: 0 0 15px 0;
    font-size: 1.3em;
    color: var(--primary-accent);
}
.log-record {
    padding: 15px;
    border: 1px solid var(--border-light);
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: #F9FAFB;
}
.log-record .details-grid {
    gap: 10px 25px; /* Tighter gap for log records */
}
    .show-more-btn { width: 100%; margin-top: 15px; background: none; border: 1px dashed var(--border-light); color: var(--text-secondary); padding: 10px; font-weight: 600; cursor: pointer; border-radius: 8px; }
    .loader { border: 4px solid var(--border-light); border-top: 4px solid var(--primary-accent); border-radius: 50%; width: 22px; height: 22px; animation: spin 1s linear infinite; display: none; margin: 20px auto; }
    @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    #version-info-container { text-align: right; font-size: 0.9em; color: var(--text-secondary); }
    .error-message { color: var(--red-deny); font-weight: 600; }
    #updateNotificationArea { margin-top: 5px; padding: 8px; background-color: var(--yellow); color: var(--text-primary); border-radius: 8px; }
    #updateNotificationArea button { width: 100%; padding: 6px; font-size: 0.9em; background-color: var(--text-primary); color: white; border: none; cursor: pointer; margin-top: 5px; }

    /* Tab Styles */
    .tabs { display: flex; border-bottom: 2px solid var(--border-light); margin-bottom: 20px; }
    .tab { padding: 10px 20px; cursor: pointer; font-size: 1.1em; font-weight: 600; color: var(--text-secondary); border-bottom: 2px solid transparent; }
    .tab.active { color: var(--primary-accent); border-bottom-color: var(--primary-accent); }
  </style>
</head>
<body>

  <div class="header">
    <h1>Case Management</h1>
    <div id="version-info-container">
      <div>VERSION: <strong id="scriptVersionDisplay">...</strong></div>
      <div id="versionStatusMessage" style="font-size: 0.9em; margin-top: 3px;"></div>
      <div id="updateNotificationArea" style="display: none;">
          <strong>Update Available!</strong>
          <div id="updateFeaturesDisplay" style="font-size: 0.9em; margin: 4px 0;"></div>
          <button id="updateButton">Update Now</button>
      </div>
      <div id="versionError" class="error-message" style="display:none;"></div>
    </div>
  </div>

  <div class="page-container">
    <div class="tabs">
      <div class="tab active" onclick="switchTab('all')">All Tasks</div>
      <div class="tab" onclick="switchTab('my')">My Cases</div>
    </div>
    <div class="search-container">
      <input type="text" id="searchInput" placeholder="Search by Main Task ID, Country, Account Name, etc...">
      <button onclick="handleSearch()">Search</button>
      <button onclick="refreshCache(event)" style="background-color: #f59e0b;">Refresh Live Data</button>
    </div>

    <div id="search-results-container" class="table-section" style="display: none;">
        <h2 class="section-header">
            Search Results
            <button onclick="closeSearchResults()" style="float: right; font-size: 0.8em; cursor: pointer;">X</button>
        </h2>
        <div class="table-container">
            <table id="search-results-table">
                <thead>
                    <tr>
                        <th onclick="sortTable('search-results', 0)">SLA Status <span class="sort-icon"></span></th>
                        <th onclick="sortTable('search-results', 1)">Menu Request Sent Date <span class="sort-icon"></span></th>
                        <th onclick="sortTable('search-results', 2)">Task ID <span class="sort-icon"></span></th>
                        <th onclick="sortTable('search-results', 3)">Country <span class="sort-icon"></span></th>
                        <th onclick="sortTable('search-results', 4)">Account Name <span class="sort-icon"></span></th>
                    </tr>
                </thead>
                <tbody id="search-results-body">
                </tbody>
            </table>
        </div>
    </div>

    <div id="cases-container">
      <!-- Tables will be injected here -->
    </div>
  </div>

  <div id="case-modal" class="modal-overlay">
    <div class="modal-content">
      <div class="modal-main">
        <div class="modal-header">
          <h2 id="modal-title">Case Details</h2>
          <button class="close-button" onclick="closeCaseModal()">×</button>
        </div>
        <div class="details-grid" id="modal-details-grid">
          </div>
        <!-- ===== NEW LOG SECTIONS START ===== -->
<div id="escalation-logs-container" class="log-section" style="display:none;">
    <h3>Escalation Logs</h3>
    <div id="escalation-logs-grid"></div>
</div>
<div id="pausing-logs-container" class="log-section" style="display:none;">
    <h3>Pausing Logs</h3>
    <div id="pausing-logs-grid"></div>
</div>
<div id="cooperation-logs-container" class="log-section" style="display:none;">
    <h3>Cooperation Logs</h3>
    <div id="cooperation-logs-grid"></div>
</div>
<!-- ===== NEW LOG SECTIONS END ===== -->
        <div class="modal-actions">
          <div id="case-action-buttons" style="margin-right: auto;">
              <!-- Buttons will be dynamically inserted here -->
          </div>
          <button id="modal-btn-edit" class="btn-secondary" onclick="toggleEditMode()">Edit</button>
          <button id="modal-btn-cancel" class="btn-secondary" onclick="cancelEdit()" style="display:none;">Cancel</button>
          <button id="modal-btn-save" class="btn-primary" onclick="saveChanges(this)" style="display:none;">Save</button>
        </div>
      </div>
      <div id="edit-guide-sidebar">
        <h3>Recalculation Notice</h3>
        <p>Editing date fields will automatically recalculate the **Stored Agent Handling Time**.</p>
        <div class="calculation">
            <p><strong>New Time = (End - Start) - Pause - Escalation</strong></p>
            <p id="guide-calculation-details"></p>
        </div>
        <p>This change will be saved when you click "Save".</p>
      </div>
    </div>
  </div>

  <script>
    let caseDataStore = {};
    let caseDataStoreByStatus = {};
    // --- GLOBAL STATE ---
    const STATUS_SECTIONS = ['Not Started', 'In Progress', 'Task Paused', 'Escalated', 'Completed', 'Cancelled'];
    let currentTab = 'all';
    let offsets = {};
    STATUS_SECTIONS.forEach(s => offsets[s] = 0);
    let activeCaseData = null; // To store data for the open modal
    const ALL_FIELDS = ['Created By', 'Useremail', 'Main Task ID', 'Country', 'Menu Request Sent Date', 'Language', 'Case Title', 'Category', 'Account Name', 'Status', 'Provider Id', 'City', 'Menu instructions', 'Onboarding instructions', 'Menu Comment', 'Menu link', 'Dish Photos Link', 'Photo Coverage', 'Main Task Start Date/Time', 'Main Task End Date/Time', 'Task TAT', 'Escalated Comment', 'Task Paused', 'TAT Adherance', 'Salesforce Updated', 'Salesforce Updated time', 'Ready for QA', 'Date stamp', 'Task Type', 'Rework Count', 'No of Main dishes(Excluding Extras, drinks, sides etc.)', 'Total No. of dishes', 'Total No. of categories', 'Total no. of options', 'Total no. of option Groups', 'Total no. of tags', 'Total no. of timetables.', 'No of Valid Photos for Main dishes (Exlcuding Extras, drinks, sides etc.)', 'Comments', 'Event Summary', 'Stored Escalation Duration', 'Stored Pause Duration', 'Stored Agent Handling Time', 'Retailer Provider Type', 'Airtable Link', 'Description Coverage', 'Visual and Descriptive Elements', 'Claim Flag', 'SLA Missed Reason', 'SLA Missed Comment', 'Linking Snapshot URL'];

    // --- INITIALIZATION ---
    window.addEventListener('load', function() {
        fetchVersionInformation();
        initializeBoard();
        setupEventListeners();
    });

    function initializeBoard() {
        const container = document.getElementById('cases-container');
        container.innerHTML = '';
        caseDataStoreByStatus = {}; // Reset data store
        STATUS_SECTIONS.forEach(status => {
            offsets[status] = 0;
            const initiallyOpen = status === 'Not Started' || status === 'In Progress';
            container.insertAdjacentHTML('beforeend', createTableSectionHTML(status, initiallyOpen));
            if (initiallyOpen) {
                loadCases(status);
            }
        });
    }

    // --- NEW: Attach event listeners once ---
    function setupEventListeners() {
        document.getElementById('cases-container').addEventListener('click', function(event) {
            const header = event.target.closest('.section-header');
            if (header) {
                const status = header.dataset.status;
                const section = header.parentElement;
                const tableContainer = section.querySelector('.table-container');
                const isLoaded = section.dataset.loaded === 'true';

                if (!isLoaded) {
                    loadCases(status);
                    section.dataset.loaded = 'true';
                }
                tableContainer.style.display = tableContainer.style.display === 'none' ? 'block' : 'none';
                const icon = header.querySelector('.toggle-icon');
                icon.textContent = tableContainer.style.display === 'none' ? '▶' : '▼';
            }
        });
    }

    // --- DATA FETCHING & RENDERING ---
    function switchTab(tabName) {
        currentTab = tabName;
        document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
        document.querySelector(`.tab[onclick="switchTab('${tabName}')"]`).classList.add('active');
        initializeBoard();
    }

    function loadCases(status, showAll = false) {
        const searchTerm = document.getElementById('searchInput').value;
        const tableBodyId = `table-body-${status.toLowerCase().replace(/ /g, '-')}`;
        const tableBody = document.getElementById(tableBodyId);

        if (!tableBody) return;

        const showMoreBtn = document.getElementById(`show-more-${status.toLowerCase().replace(/ /g, '-')}`);
        const btnText = showMoreBtn ? showMoreBtn.querySelector('.btn-text') : null;
        const btnLoader = showMoreBtn ? showMoreBtn.querySelector('.btn-loader') : null;

        if (offsets[status] === 0) { // Initial load
           const loaderRow = `<tr><td colspan="5"><div class="loader" style="display:block;"></div></td></tr>`;
           tableBody.innerHTML = loaderRow;
        } else if (btnLoader && btnText) { // "Show More" click
            btnText.style.display = 'none';
            btnLoader.style.display = 'inline-block';
            showMoreBtn.disabled = true;
        }

        const options = {
            status: status,
            searchTerm: searchTerm,
            limit: showAll ? 1000 : 20,
            offset: showAll ? 0 : offsets[status],
            filter: currentTab
        };

        google.script.run
            .withSuccessHandler(cases => {
                if (btnLoader && btnText) {
                    btnText.style.display = 'inline-block';
                    btnLoader.style.display = 'none';
                    showMoreBtn.disabled = false;
                }
                displayCases(cases, status, showAll);
            })
            .withFailureHandler(err => {
                console.error(err);
                tableBody.innerHTML = '<tr><td colspan="5"><p class="error-message">Error loading cases.</p></td></tr>';
                if (btnLoader && btnText) {
                    btnText.style.display = 'inline-block';
                    btnLoader.style.display = 'none';
                    showMoreBtn.disabled = false;
                }
            })
            .getCasesByStatus(options);
    }

    function displayCases(cases, status, isShowingAll) {
        const tableBodyId = `table-body-${status.toLowerCase().replace(/ /g, '-')}`;
        const tableBody = document.getElementById(tableBodyId);
        if (!tableBody) return;

        const isInitialLoad = offsets[status] === 0;

        // Update data stores
        if (isInitialLoad) {
            caseDataStoreByStatus[status] = cases || [];
        } else if (cases && cases.length > 0) {
            caseDataStoreByStatus[status] = (caseDataStoreByStatus[status] || []).concat(cases);
        }

        if (cases && cases.length > 0) {
            cases.forEach(caseData => {
                caseDataStore[caseData['Main Task ID']] = caseData;
            });
        }

        // Render: full re-render on initial load, append on "Show More"
        if (isInitialLoad) {
            renderTable(status);
        } else if (cases && cases.length > 0) {
            let newRowsHtml = '';
            cases.forEach(caseData => newRowsHtml += createTableRowHTML(caseData));
            tableBody.insertAdjacentHTML('beforeend', newRowsHtml);
        }

        offsets[status] += (cases ? cases.length : 0);
        const showMoreBtn = document.getElementById(`show-more-${status.toLowerCase().replace(/ /g, '-')}`);
        if (showMoreBtn) {
            showMoreBtn.style.display = (!cases || cases.length < 20 || isShowingAll) ? 'none' : 'block';
        }
    }

    function renderTable(status) {
        const tableBodyId = `table-body-${status.toLowerCase().replace(/ /g, '-')}`;
        const tableBody = document.getElementById(tableBodyId);
        const allCasesForStatus = caseDataStoreByStatus[status];

        if (!allCasesForStatus || allCasesForStatus.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="5" style="text-align:center; color: var(--text-secondary); padding: 10px;">No cases found.</td></tr>';
            return;
        }

        const casesByCountry = allCasesForStatus.reduce((acc, caseData) => {
            const country = caseData['Country'] || 'Unspecified';
            if (!acc[country]) acc[country] = [];
            acc[country].push(caseData);
            return acc;
        }, {});

        const sortedCountries = Object.keys(casesByCountry).sort();
        let tableHtml = '';
        sortedCountries.forEach(country => {
            tableHtml += `<tr class="group-header"><td colspan="5">${country}</td></tr>`;
            casesByCountry[country].forEach(caseData => {
                tableHtml += createTableRowHTML(caseData);
            });
        });
        tableBody.innerHTML = tableHtml;
    }

    // --- HTML TEMPLATING ---
    function createTableSectionHTML(status, isOpen = false) {
      const statusId = status.toLowerCase().replace(/ /g, '-');
      const isLoaded = isOpen ? 'true' : 'false';
      const icon = isOpen ? '▼' : '▶';
      const display = isOpen ? 'block' : 'none';

      return `
        <div class="table-section" data-status="${status}" data-loaded="${isLoaded}">
          <h2 class="section-header" data-status="${status}" style="cursor: pointer;">
            <span class="toggle-icon">${icon}</span> ${status}
          </h2>
          <div class="table-container" style="display: ${display};">
            <table>
              <thead>
                <tr>
                  <th onclick="sortTable('${statusId}', 0)">SLA Status <span class="sort-icon"></span></th>
                  <th onclick="sortTable('${statusId}', 1)">Menu Request Sent Date <span class="sort-icon"></span></th>
                  <th onclick="sortTable('${statusId}', 2)">Task ID</th>
                  <th onclick="sortTable('${statusId}', 3)">Country</th>
                  <th onclick="sortTable('${statusId}', 4)">Account Name</th>
                </tr>
              </thead>
              <tbody id="table-body-${statusId}">
              </tbody>
            </table>
            <button id="show-more-${statusId}" class="show-more-btn" onclick="loadCases('${status}', false)">
              <span class="btn-text">Show More</span>
              <span class="loader btn-loader" style="display:none; height: 15px; width: 15px; border-width: 2px;"></span>
            </button>
          </div>
        </div>
      `;
    }

    function createTableRowHTML(caseData) {
        const caseId = caseData['Main Task ID'];
        const slaStatus = calculateSlaStatus(caseData);
        return `
            <tr onclick="openCaseModal('${caseId}')">
                <td>${slaStatus.icon} ${slaStatus.text}</td>
                <td>${formatDisplayDate(caseData['Menu Request Sent Date'])}</td>
                <td>${caseId || 'N/A'}</td>
                <td>${caseData['Country'] || 'N/A'}</td>
                <td>${caseData['Account Name'] || 'N/A'}</td>
            </tr>
        `;
    }

    function calculateSlaStatus(caseData) {
        const menuRequestDate = new Date(caseData['Menu Request Sent Date']);
        if (isNaN(menuRequestDate.getTime())) {
            return { icon: '❓', text: 'Invalid Date' };
        }

        const now = new Date();
        let slaTime = menuRequestDate.getTime() + (24 * 60 * 60 * 1000); // 24 hours in milliseconds

        if (caseData.Status === 'Escalated') {
            const escalatedStartTime = new Date(caseData['Escalated Start Time']);
            if (!isNaN(escalatedStartTime.getTime())) {
                const escalatedTime = now - escalatedStartTime;
                slaTime += escalatedTime;
            }
        }

        const hoursRemaining = (slaTime - now) / (1000 * 60 * 60);

        if (hoursRemaining < 0) {
            return { icon: '🔥', text: 'Total SLA Overdue' };
        } else if (hoursRemaining <= 4) {
            return { icon: '🔴', text: 'Critical' };
        } else if (hoursRemaining <= 8) {
            return { icon: '🟠', text: 'Critical' };
        } else if (hoursRemaining <= 16) {
            return { icon: '🟡', text: 'Medium' };
        } else {
            return { icon: '🟢', text: 'Low' };
        }
    }

    function sortTable(tableId, columnIndex) {
        const isSearch = tableId === 'search-results';
        const tableBody = document.getElementById(isSearch ? 'search-results-body' : `table-body-${tableId}`);
        const headers = tableBody.closest('table').querySelectorAll('th');
        const header = headers[columnIndex];

        const currentDirection = header.dataset.sortDirection || 'desc';
        const newDirection = currentDirection === 'asc' ? 'desc' : 'asc';
        const dir = newDirection === 'asc' ? 1 : -1;

        headers.forEach(h => {
            h.querySelector('.sort-icon').textContent = '';
            h.dataset.sortDirection = '';
        });

        header.dataset.sortDirection = newDirection;
        header.querySelector('.sort-icon').textContent = newDirection === 'asc' ? '▲' : '▼';

        let dataToSort;
        if (isSearch) {
            dataToSort = (caseDataStore.searchResults || []).slice(); // Use a copy
        } else {
            const status = tableId.replace(/-/g, ' ').replace(/(^\w|\s\w)/g, m => m.toUpperCase());
            dataToSort = (caseDataStoreByStatus[status] || []).slice(); // Use a copy
        }

        if (!dataToSort || dataToSort.length < 2) return;

        dataToSort.sort((a, b) => {
            let aValue, bValue;
            switch (columnIndex) {
                case 0: // SLA Status
                    const order = ['🔥', '🔴', '🟠', '🟡', '🟢', '❓'];
                    aValue = order.indexOf(calculateSlaStatus(a).icon);
                    bValue = order.indexOf(calculateSlaStatus(b).icon);
                    break;
                case 1: // Date
                    aValue = new Date(a['Menu Request Sent Date'] || 0);
                    bValue = new Date(b['Menu Request Sent Date'] || 0);
                    break;
                case 2:
                    aValue = a['Main Task ID'] || '';
                    bValue = b['Main Task ID'] || '';
                    return aValue.localeCompare(bValue) * dir;
                case 3:
                    aValue = a['Country'] || '';
                    bValue = b['Country'] || '';
                    return aValue.localeCompare(bValue) * dir;
                case 4:
                    aValue = a['Account Name'] || '';
                    bValue = b['Account Name'] || '';
                    return aValue.localeCompare(bValue) * dir;
                default: return 0;
            }
            return (aValue < bValue ? -1 : aValue > bValue ? 1 : 0) * dir;
        });

        let newHtml = '';
        if (isSearch) {
             dataToSort.forEach(caseData => newHtml += createTableRowHTML(caseData));
        } else {
            const casesByCountry = dataToSort.reduce((acc, caseData) => {
                const country = caseData['Country'] || 'Unspecified';
                if (!acc[country]) acc[country] = [];
                acc[country].push(caseData);
                return acc;
            }, {});
            const sortedCountries = Object.keys(casesByCountry).sort();
            sortedCountries.forEach(country => {
                newHtml += `<tr class="group-header"><td colspan="5">${country}</td></tr>`;
                casesByCountry[country].forEach(caseData => {
                    newHtml += createTableRowHTML(caseData);
                });
            });
        }
        tableBody.innerHTML = newHtml;
    }

/**
 * Main handler to display all fetched logs.
 */
function displayCaseLogs(logs) {
    if (logs.error) {
        console.error("Error fetching logs:", logs.error);
        return;
    }

    const renderLogSection = (containerId, gridId, logArray, title, pkName) => {
        const container = document.getElementById(containerId);
        const grid = document.getElementById(gridId);
        if (logArray && logArray.length > 0) {
            let allLogsHtml = '';
            logArray.forEach(log => {
                const logId = log[pkName];
                let logHtml = `<div class="log-record" data-log-id="${logId}"><div class="details-grid">`;
                for (const header in log) {
                    // Use the same formatting helpers as the main modal
                    let displayValue = log[header] || '';
                    if (displayValue && isDateTimeField(header)) {
                        displayValue = formatDisplayDate(displayValue);
                    } else if (displayValue && isDurationField(header)) {
                        displayValue = formatTime(parseFloat(displayValue) * 86400);
                    }
                    logHtml += `<div class="field"><strong>${header}</strong><span class="log-field-value" data-header="${header}" data-log-id="${logId}">${displayValue}</span></div>`;
                }
                logHtml += `</div></div>`;
                allLogsHtml += logHtml;
            });
            grid.innerHTML = allLogsHtml;
            container.style.display = 'block';
        } else {
            container.style.display = 'none';
        }
    };

    renderLogSection('escalation-logs-container', 'escalation-logs-grid', logs.escalationLogs, 'Escalation Logs', 'Log ID');
    renderLogSection('pausing-logs-container', 'pausing-logs-grid', logs.pausingLogs, 'Pausing Logs', 'ID');
    renderLogSection('cooperation-logs-container', 'cooperation-logs-grid', logs.cooperationLogs, 'Cooperation Logs', 'Log ID');
}

/**
 * Helper function to find the original log record from the locally stored data.
 */
function getOriginalLog(logId, logType) {
    if (!activeCaseData || !activeCaseData[logType]) return null;
    const pkName = (logType === 'pausingLogs') ? 'ID' : 'Log ID';
    return activeCaseData[logType].find(log => String(log[pkName]) === String(logId));
}

    // --- MODAL & EDITING WORKFLOW ---
    function openCaseModal(caseId) {
    activeCaseData = caseDataStore[caseId];
    if (!activeCaseData) { alert('Error: Could not find case data.'); return; }

    const grid = document.getElementById('modal-details-grid');
    document.getElementById('modal-title').textContent = `Case Details: ${activeCaseData['Main Task ID']}`;

    let detailsHTML = '';
    const linkFields = ['Menu link', 'Dish Photos Link'];
    ALL_FIELDS.forEach(field => {
        let displayValue = activeCaseData[field] || '';
        let finalHtml;

        if (linkFields.includes(field) && displayValue) {
            finalHtml = `<a href="${displayValue}" target="_blank" class="truncate-link">${displayValue}</a>`;
        } else if (displayValue) {
            if (isDateTimeField(field)) {
                displayValue = formatDisplayDate(displayValue);
            } else if (isDurationField(field)) {
                const seconds = parseFloat(displayValue) * 86400;
                displayValue = formatTime(seconds);
            }
            finalHtml = `<span class="field-value">${displayValue}</span>`;
        } else {
            finalHtml = `<span class="field-value"></span>`;
        }

        detailsHTML += `<div class="field"><strong>${field}</strong>${finalHtml}</div>`;
    });
    grid.innerHTML = detailsHTML;

    cancelEdit(true);

    document.getElementById('escalation-logs-container').style.display = 'none';
    document.getElementById('pausing-logs-container').style.display = 'none';
    document.getElementById('cooperation-logs-container').style.display = 'none';
    document.getElementById('escalation-logs-grid').innerHTML = '';
    document.getElementById('pausing-logs-grid').innerHTML = '';
    document.getElementById('cooperation-logs-grid').innerHTML = '';

    google.script.run
        .withSuccessHandler(logs => {
            activeCaseData.escalationLogs = logs.escalationLogs;
            activeCaseData.pausingLogs = logs.pausingLogs;
            activeCaseData.cooperationLogs = logs.cooperationLogs;
            displayCaseLogs(logs);
        })
        .withFailureHandler(err => console.error('Could not load logs:', err))
        .getLogsForCase(caseId);

    document.getElementById('case-modal').style.display = 'flex';
    populateActionButtons(activeCaseData);
}

function handleCaseAction(action, caseId) {
    const actionButton = event.target;
    actionButton.disabled = true;
    actionButton.textContent = 'Processing...';

    google.script.run
        .withSuccessHandler(response => {
            alert(response);
            actionButton.disabled = false;
            actionButton.textContent = action.replace(/([A-Z])/g, ' $1').trim(); // Restore original text
            closeCaseModal();
            initializeBoard(); // Refresh the board to reflect changes
        })
        .withFailureHandler(err => {
            alert('Error: ' + err.message);
            actionButton.disabled = false;
            actionButton.textContent = action.replace(/([A-Z])/g, ' $1').trim(); // Restore original text
        })
        [action](caseId);
}

function populateActionButtons(caseData) {
    const container = document.getElementById('case-action-buttons');
    container.innerHTML = ''; // Clear existing buttons
    const caseId = caseData['Main Task ID'];
    const isPaused = activeCaseData['Pause Start Time'] && !activeCaseData['Paused End Time'];
    const isEscalated = activeCaseData['Escalated Start Time'] && !activeCaseData['Escalated End Time'];

    // --- BUTTON DEFINITIONS ---
    const buttons = [
        { text: 'Claim Case', icon: 'fa-solid fa-hand', className: 'btn-claim', condition: !caseData['Useremail'], action: () => handleCaseAction('claimCase', caseId) },
        { text: 'Pause Case', icon: 'fa-solid fa-pause', className: 'btn-pause', condition: !isPaused, action: () => handleCaseAction('pauseCase', caseId) },
        { text: 'Unpause', icon: 'fa-solid fa-play', className: 'btn-unpause', condition: isPaused, action: () => handleCaseAction('unpauseCase', caseId) },
        { text: 'Escalate', icon: 'fa-solid fa-triangle-exclamation', className: 'btn-escalate', condition: !isEscalated, action: () => handleCaseAction('escalateCase', caseId) },
        { text: 'De-Escalate', icon: 'fa-solid fa-arrow-down-triangle-square', className: 'btn-deescalate', condition: isEscalated, action: () => handleCaseAction('deEscalateCase', caseId) },
        { text: 'End Case', icon: 'fa-solid fa-flag-checkered', className: 'btn-end', action: () => handleCaseAction('endCase', caseId) }
    ];

    buttons.forEach(btn => {
        if (btn.condition !== false) { // Show button if condition is true or undefined
            const buttonEl = document.createElement('button');
            buttonEl.className = btn.className;
            buttonEl.innerHTML = `<i class="${btn.icon}"></i> ${btn.text}`;
            buttonEl.onclick = btn.action;
            container.appendChild(buttonEl);
        }
    });
}
    function closeCaseModal() {
        document.getElementById('case-modal').style.display = 'none';
        hideGuide();
        activeCaseData = null;
    }
    function toggleEditMode() {
        const grid = document.getElementById('modal-details-grid');
        grid.classList.add('edit-mode');
        document.getElementById('modal-btn-edit').style.display = 'none';
        document.getElementById('modal-btn-cancel').style.display = 'inline-flex';
        document.getElementById('modal-btn-save').style.display = 'inline-flex';

        grid.querySelectorAll('.field-value, .truncate-link').forEach(element => {
            const headerText = element.previousElementSibling.textContent;
            const value = activeCaseData[headerText] || '';
            const isTextarea = ['Menu instructions', 'Onboarding instructions', 'Menu Comment', 'Comments', 'Event Summary', 'Escalated Comment', 'SLA Missed Comment'].includes(headerText);
            const inputType = (headerText.toLowerCase().includes('date') || headerText.toLowerCase().includes('time')) ? 'datetime-local' : 'text';

            let inputElement;
            if (isTextarea) {
                inputElement = document.createElement('textarea');
                inputElement.textContent = value;
            } else {
                inputElement = document.createElement('input');
                inputElement.type = inputType;
                if (inputType === 'datetime-local' && value) {
                    try { inputElement.value = new Date(value).toISOString().substring(0, 16); } catch(e) {}
                } else {
                    inputElement.value = value;
                }
            }
            inputElement.dataset.header = headerText;
            if (isDateTimeField(headerText)) {
                inputElement.onchange = handleTimestampChange;
            }
            element.replaceWith(inputElement);
        });
        // --- THIS BLOCK MAKES LOGS EDITABLE ---
        const modal = document.getElementById('case-modal');
        modal.querySelectorAll('.log-field-value').forEach(span => {
    const headerText = span.dataset.header;
    const logId = span.dataset.logId;
    const value = span.textContent;

    // Determine input type
    const isTextarea = ['Cooperation Notes', 'Escalated Comment'].includes(headerText);
    const isDateTime = isDateTimeField(headerText);
    const inputType = isDateTime ? 'datetime-local' : 'text';

    let inputElement;
    if (isTextarea) {
        inputElement = document.createElement('textarea');
        inputElement.textContent = value;
    } else {
        inputElement = document.createElement('input');
        inputElement.type = inputType;
        // Re-fetch original ISO string for datetime-local inputs for accuracy
        if (isDateTime && activeCaseData) {
            let originalLog;
            if(span.closest('#escalation-logs-container')) originalLog = getOriginalLog(logId, 'escalationLogs');
            if(span.closest('#pausing-logs-container')) originalLog = getOriginalLog(logId, 'pausingLogs');
            if(span.closest('#cooperation-logs-container')) originalLog = getOriginalLog(logId, 'cooperationLogs');

            const originalValue = originalLog ? originalLog[headerText] : '';
            if (originalValue) {
                try { inputElement.value = new Date(originalValue).toISOString().substring(0,16); } catch(e) {}
            }
        } else {
            inputElement.value = value;
        }
    }
    // Transfer data attributes for saving later
    inputElement.dataset.header = headerText;
    inputElement.dataset.logId = logId;
    if (isDateTimeField(headerText)) {
        inputElement.onchange = handleTimestampChange;
    }
    span.replaceWith(inputElement);
});
    }
    function cancelEdit(isReset = false) {
        hideGuide();
        const grid = document.getElementById('modal-details-grid');
        if (!grid.classList.contains('edit-mode') && !isReset) return;

        grid.classList.remove('edit-mode');
        // This re-renders the main details grid to correctly restore special fields like links and formatted dates
        let detailsHTML = '';
        const linkFields = ['Menu link', 'Dish Photos Link'];
        ALL_FIELDS.forEach(field => {
            let displayValue = activeCaseData[field] || '';
            let finalHtml;

            if (linkFields.includes(field) && displayValue) {
                finalHtml = `<a href="${displayValue}" target="_blank" class="truncate-link">${displayValue}</a>`;
            } else if (displayValue) {
                if (isDateTimeField(field)) {
                    displayValue = formatDisplayDate(displayValue);
                } else if (isDurationField(field)) {
                    const seconds = parseFloat(displayValue) * 86400;
                    displayValue = formatTime(seconds);
                }
                finalHtml = `<span class="field-value">${displayValue}</span>`;
            } else {
                finalHtml = `<span class="field-value"></span>`;
            }
            detailsHTML += `<div class="field"><strong>${field}</strong>${finalHtml}</div>`;
        });
        grid.innerHTML = detailsHTML;

        document.getElementById('modal-btn-edit').style.display = 'inline-flex';
        document.getElementById('modal-btn-cancel').style.display = 'none';
        document.getElementById('modal-btn-save').style.display = 'none';

        // --- ADD THIS BLOCK TO CANCEL LOG EDITS ---
// Revert log fields
const logSections = ['escalation-logs-grid', 'pausing-logs-grid', 'cooperation-logs-grid'];
logSections.forEach(gridId => {
    document.getElementById(gridId).querySelectorAll('input, textarea').forEach(input => {
        const logId = input.dataset.logId;
        const header = input.dataset.header;

        let originalLog;
        if(gridId.includes('escalation')) originalLog = getOriginalLog(logId, 'escalationLogs');
        if(gridId.includes('pausing')) originalLog = getOriginalLog(logId, 'pausingLogs');
        if(gridId.includes('cooperation')) originalLog = getOriginalLog(logId, 'cooperationLogs');

        const span = document.createElement('span');
        span.className = 'log-field-value';
        span.dataset.header = header;
        span.dataset.logId = logId;

        let displayValue = originalLog ? (originalLog[header] || '') : '';
        if (displayValue && isDateTimeField(header)) displayValue = formatDisplayDate(displayValue);
        else if(displayValue && isDurationField(header)) displayValue = formatTime(parseFloat(displayValue) * 86400);

        span.textContent = displayValue;
        input.replaceWith(span);
    });
});
    }
    function saveChanges(saveButton) {
    saveButton.textContent = 'Saving...';
    saveButton.disabled = true; // Prevent multiple clicks
    const caseId = activeCaseData['Main Task ID'];
    const updatedData = {};
    const modal = document.getElementById('case-modal');

    modal.querySelectorAll('input, textarea').forEach(input => {
        let value = input.value;
        // IMPORTANT: Convert datetime-local string to full ISO 8601 string for server
        if (input.type === 'datetime-local' && value) {
            value = new Date(value).toISOString();
        }
        updatedData[input.dataset.header] = value;
    });

    // If the calculation guide was visible, it means timestamps were changed.
    // We must recalculate and save the new durations.
    if (document.getElementById('edit-guide-sidebar').classList.contains('visible')) {
        let totalPauseSeconds = 0;
        document.querySelectorAll('#pausing-logs-grid .log-record').forEach(log => {
            const startInput = log.querySelector('input[data-header="Pause Start Time"]');
            const endInput = log.querySelector('input[data-header="Pause End Time"]');
            if (startInput && endInput && startInput.value && endInput.value) {
                const start = new Date(startInput.value);
                const end = new Date(endInput.value);
                if (end > start) totalPauseSeconds += (end - start) / 1000;
            }
        });

        let totalEscalationSeconds = 0;
        document.querySelectorAll('#escalation-logs-grid .log-record').forEach(log => {
            const startInput = log.querySelector('input[data-header="Escalation Start Time"]');
            const endInput = log.querySelector('input[data-header="Escalation End Time"]');
            if (startInput && endInput && startInput.value && endInput.value) {
                const start = new Date(startInput.value);
                const end = new Date(endInput.value);
                if (end > start) totalEscalationSeconds += (end - start) / 1000;
            }
        });

        const mainTaskStart = new Date(updatedData['Main Task Start Date/Time']);
        const mainTaskEnd = new Date(updatedData['Main Task End Date/Time']);
        let newAHTSeconds = 0;
        if (mainTaskEnd > mainTaskStart) {
            const grossSeconds = (mainTaskEnd - mainTaskStart) / 1000;
            newAHTSeconds = grossSeconds - totalPauseSeconds - totalEscalationSeconds;
        }

        // Convert seconds to Google Sheet's duration format (fraction of a day)
        updatedData['Stored Agent Handling Time'] = newAHTSeconds > 0 ? (newAHTSeconds / 86400) : 0;
        updatedData['Stored Pause Duration'] = totalPauseSeconds > 0 ? (totalPauseSeconds / 86400) : 0;
        updatedData['Stored Escalation Duration'] = totalEscalationSeconds > 0 ? (totalEscalationSeconds / 86400) : 0;
    }
// --- ADD THIS BLOCK TO SAVE LOGS ---
const collectLogUpdates = (containerId, pkName) => {
    const updates = new Map();
    document.querySelectorAll(`#${containerId} input, #${containerId} textarea`).forEach(input => {
        const logId = input.dataset.logId;
        const header = input.dataset.header;
        let value = input.value;
        if (input.type === 'datetime-local' && value) {
            value = new Date(value).toISOString();
        }
        if (!updates.has(logId)) {
            updates.set(logId, {});
        }
        updates.get(logId)[header] = value;
    });
    return updates;
};

const escalationUpdates = collectLogUpdates('escalation-logs-grid', 'Log ID');
const pausingUpdates = collectLogUpdates('pausing-logs-grid', 'ID');
const cooperationUpdates = collectLogUpdates('cooperation-logs-grid', 'Log ID');

escalationUpdates.forEach((data, logId) => {
    google.script.run.updateLogData(logId, 'Escalation Logs', 'Log ID', data);
});
pausingUpdates.forEach((data, logId) => {
    google.script.run.updateLogData(logId, 'Pausing Logs', 'ID', data);
});
cooperationUpdates.forEach((data, logId) => {
    google.script.run.updateLogData(logId, 'Cooperation Logs', 'Log ID', data);
});
// --- END OF BLOCK ---

    google.script.run
        .withSuccessHandler(response => {
            alert(response);
            closeCaseModal();
            initializeBoard();
        })
        .withFailureHandler(err => {
            alert('Error: ' + err.message);
            saveButton.textContent = 'Save'; // Restore button text on failure
            saveButton.disabled = false;
        })
        .updateCaseData(caseId, updatedData);
}

    // --- EDIT GUIDE LOGIC ---
function handleTimestampChange() {
    const guide = document.getElementById('edit-guide-sidebar');
    const guideDetails = document.getElementById('guide-calculation-details');
    const modal = document.getElementById('case-modal');

    const getDateValue = (header) => {
        const input = modal.querySelector(`input[data-header="${header}"]`);
        return input && input.value ? new Date(input.value) : null;
    };

    // 1. Calculate Total Pause Duration from all logs
    let totalPauseSeconds = 0;
    const pauseLogs = Array.from(modal.querySelectorAll('#pausing-logs-grid .log-record'));
    pauseLogs.forEach(log => {
        const startInput = log.querySelector('input[data-header="Pause Start Time"]');
        const endInput = log.querySelector('input[data-header="Pause End Time"]');
        if (startInput && endInput && startInput.value && endInput.value) {
            const start = new Date(startInput.value);
            const end = new Date(endInput.value);
            if (end > start) {
                totalPauseSeconds += (end - start) / 1000;
            }
        }
    });

    // 2. Calculate Total Escalation Duration from all logs
    let totalEscalationSeconds = 0;
    const escalationLogs = Array.from(modal.querySelectorAll('#escalation-logs-grid .log-record'));
    escalationLogs.forEach(log => {
        const startInput = log.querySelector('input[data-header="Escalation Start Time"]');
        const endInput = log.querySelector('input[data-header="Escalation End Time"]');
        if (startInput && endInput && startInput.value && endInput.value) {
            const start = new Date(startInput.value);
            const end = new Date(endInput.value);
            if (end > start) {
                totalEscalationSeconds += (end - start) / 1000;
            }
        }
    });

    // 3. Calculate Agent Handling Time
    const mainTaskStart = getDateValue('Main Task Start Date/Time');
    const mainTaskEnd = getDateValue('Main Task End Date/Time');
    let newAHTSeconds = 0;
    let grossSeconds = 0;

    if (mainTaskStart && mainTaskEnd && mainTaskEnd > mainTaskStart) {
        grossSeconds = (mainTaskEnd - mainTaskStart) / 1000;
        newAHTSeconds = grossSeconds - totalPauseSeconds - totalEscalationSeconds;
    } else {
        guide.classList.remove('visible');
        return; // Exit if main dates are invalid
    }

    // 4. Populate and show the sidebar
    guideDetails.innerHTML = `
        <p>Changing these times will affect the following stored durations:</p>
        <strong>New Agent Handling Time:</strong><br>
        <span style="font-size: 1.5em; color: var(--primary-accent);">${formatTime(newAHTSeconds)}</span><br>
        <strong>New Pause Duration:</strong><br>
        <span style="font-size: 1.2em;">${formatTime(totalPauseSeconds)}</span><br>
        <strong>New Escalation Duration:</strong><br>
        <span style="font-size: 1.2em;">${formatTime(totalEscalationSeconds)}</span><br><br>
        <hr>
        <strong>Calculation:</strong><br>
        (${formatTime(grossSeconds)}) [Main Task]<br>
        - ${formatTime(totalPauseSeconds)} [Total Pause]<br>
        - ${formatTime(totalEscalationSeconds)} [Total Escalation]
    `;
    guide.classList.add('visible');
}

function hideGuide() {
    document.getElementById('edit-guide-sidebar').classList.remove('visible');
}

    // --- UTILITIES & VERSION CHECKER ---
    function handleSearch() {
        const searchTerm = document.getElementById('searchInput').value;
        if (!searchTerm) {
            closeSearchResults();
            return;
        }

        document.getElementById('cases-container').style.display = 'none';
        document.getElementById('search-results-container').style.display = 'block';
        const tableBody = document.getElementById('search-results-body');
        tableBody.innerHTML = '<tr><td colspan="5"><div class="loader" style="display:block;"></div></td></tr>';

        google.script.run
            .withSuccessHandler(cases => {
                let tableHtml = '';
                if (cases && cases.length > 0) {
                    cases.forEach(caseData => {
                        caseDataStore[caseData['Main Task ID']] = caseData;
                        tableHtml += createTableRowHTML(caseData);
                    });
                } else {
                    tableHtml = '<tr><td colspan="5" style="text-align:center; color: var(--text-secondary); padding: 10px;">No cases found.</td></tr>';
                }
                tableBody.innerHTML = tableHtml;
            })
            .withFailureHandler(err => {
                console.error(err);
                tableBody.innerHTML = '<tr><td colspan="5"><p class="error-message">Error searching cases.</p></td></tr>';
            })
            .searchAllCases(searchTerm);
    }

    function closeSearchResults() {
        document.getElementById('searchInput').value = '';
        document.getElementById('search-results-container').style.display = 'none';
        document.getElementById('cases-container').style.display = 'block';
        initializeBoard();
    }

    function refreshCache(event) {
      const btn = event.target;
      btn.textContent = "Refreshing...";
      btn.disabled = true;
      google.script.run
        .withSuccessHandler(response => {
          alert(response);
          btn.textContent = "Refresh Live Data";
          btn.disabled = false;
          // Reload the whole board to show the fresh data
          initializeBoard();
        })
        .withFailureHandler(err => {
            alert('Error: ' + err.message);
            btn.textContent = "Refresh Live Data";
            btn.disabled = false;
        })
        .manuallyInvalidateCache();
    }
    function escape(str){return(str+"").replace(/[\\"']/g,"\\$&").replace(/\u0000/g,"\\0")}
    function formatTime(s) {
    if (isNaN(s) || !isFinite(s)) s = 0;
    const prefix = s < 0 ? "-" : "";
    s = Math.abs(s);
    const hours = Math.floor(s / 3600);
    const minutes = Math.floor((s % 3600) / 60);
    const seconds = Math.floor(s % 60);
    return `${prefix}${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
}
    function fetchVersionInformation(){google.script.run.withSuccessHandler(handleVersionDetailsResponse).withFailureHandler(handleVersionDetailsError).getVersionDetails()}
    function handleVersionDetailsResponse(e){const t=document.getElementById("scriptVersionDisplay"),o=document.getElementById("versionStatusMessage"),n=document.getElementById("updateNotificationArea"),a=document.getElementById("updateButton"),s=document.getElementById("updateFeaturesDisplay"),r=document.getElementById("versionError");if(t&&o&&n){if(r.style.display="none",e&&e.error)return t.textContent="Error",n.style.display="none",r.textContent=e.error,void(r.style.display="block");if(e&&e.runningVersion){t.textContent=e.runningVersion;const c=parseFloat(e.runningVersion),i=parseFloat(e.latestAdvertisedVersion);!isNaN(c)&&!isNaN(i)&&e.latestAdvertisedVersion&&e.updateURL&&c<i?(n.style.display="block",s.textContent=e.updateFeatures||"No features listed.",a.onclick=()=>promptForUpdate(e.updateURL,e.updateFeatures)):(o.textContent="Up to date.",n.style.display="none")}else t.textContent="N/A",r.textContent="Could not retrieve version info.",r.style.display="block"}}
    function handleVersionDetailsError(e){console.error("Error fetching version details:",e),document.getElementById("scriptVersionDisplay").textContent="Error",document.getElementById("versionError").textContent="Failed to check for updates.",document.getElementById("versionError").style.display="block"}
    function promptForUpdate(e,t){if(!e)return void alert("Update URL is not configured.");window.open(e,"_blank");const o=navigator.platform.toUpperCase().indexOf("MAC")>=0?"Cmd+D":"Ctrl+D";let n="A new version has opened in a new tab.\n\n";t&&(n+=`New features:\n- ${t.replace(/,\s*/g,"\n- ")}\n\n`),n+=`Please bookmark the new page (try ${o}) and remove your old bookmark.`,alert(n)}

    // --- ADD THESE HELPER FUNCTIONS ---
function isDateTimeField(fieldName) {
    const lower = fieldName.toLowerCase();
    return lower.includes('date') || lower.includes('time');
}

function isDurationField(fieldName) {
    return fieldName.toLowerCase().includes('duration') || fieldName === 'Stored Agent Handling Time';
}

function formatDisplayDate(isoString) {
    if (!isoString) return '';
    try {
        const date = new Date(isoString);
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const year = date.getFullYear();
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');
        return `${month}-${day}-${year} ${hours}:${minutes}:${seconds}`;
    } catch (e) {
        return isoString; // Fallback if date is invalid
    }
}
</script>
</body>
</html>
